[
["ta-class.html", "Chapter 2 TA class 2.1 New Project 2.2 R Markdown 2.3 R Code Chunks 2.4 LaTex 2.5 包(Package) 2.6 dplyr 資料轉換 &amp; ggplot2 資料視覺化 2.7 Wrangle with Data 2.8 dplyr 資料轉換 2.9 ggplot2 資料視覺化", " Chapter 2 TA class 2.1 New Project File &gt; New Project.. New Project Set the directory name and the subdirectory. 2.2 R Markdown You can write the report with RMarkdown. It can generate HTML, PDF, Word, and PPT documents. Furthermore, math equations can be write with LaTex format. Find the cheet sheet from Help &gt; Cheetsheets &gt; R Markdown Cheet Sheet Create your R Markdown! R Markdown Add the title and author name. Setup Kick the “Knit” button. Knit Then you will see the following example. 2.2.1 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) #&gt; speed dist #&gt; Min. : 4.0 Min. : 2.00 #&gt; 1st Qu.:12.0 1st Qu.: 26.00 #&gt; Median :15.0 Median : 36.00 #&gt; Mean :15.4 Mean : 42.98 #&gt; 3rd Qu.:19.0 3rd Qu.: 56.00 #&gt; Max. :25.0 Max. :120.00 2.2.2 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. 2.3 R Code Chunks shortcut Ctrl + Alt + I on Windows Cmd + Option + I on macOS Add your R code in code chunk, then R Markdown will run it. ```{r} summary(cars) ``` This is what you see in the document. summary(cars) #&gt; speed dist #&gt; Min. : 4.0 Min. : 2.00 #&gt; 1st Qu.:12.0 1st Qu.: 26.00 #&gt; Median :15.0 Median : 36.00 #&gt; Mean :15.4 Mean : 42.98 #&gt; 3rd Qu.:19.0 3rd Qu.: 56.00 #&gt; Max. :25.0 Max. :120.00 You can embed the variable in the document. ```{r} x = 5 # radius of a circle ``` For a circle with the radius `r x`, its area is `r pi * x^2`. Then you will see this. x = 5 # radius of a circle For a circle with the radius 5, its area is 78.5398163. 2.4 LaTex Use $ to add math equations in the paragraph. the acceptance rate in $95\\%$ confidence the acceptance rate in \\(95\\%\\) confidence Use $$ to add math equations in single or multiple lines. $$ f_X(x) = {x-1 \\choose r-1} p^r (1-p)^{x-r} I_{(r,r+1, \\dots)} (x) $$ \\[ f_X(x) = {x-1 \\choose r-1} p^r (1-p)^{x-r} I_{(r,r+1, \\dots)} (x) \\] $$ \\begin{aligned} f_X(x) = {x-1 \\choose r-1} p^r (1-p)^{x-r} I_{(r,r+1, \\dots)} (x) f_X(x) = {x-1 \\choose r-1} p^r (1-p)^{x-r} I_{(r,r+1, \\dots)} (x) \\end{aligned} $$ \\[ \\begin{aligned} f_X(x) = {x-1 \\choose r-1} p^r (1-p)^{x-r} I_{(r,r+1, \\dots)} (x)\\\\ f_X(x) = {x-1 \\choose r-1} p^r (1-p)^{x-r} I_{(r,r+1, \\dots)} (x) \\end{aligned} \\] For more information, see Latex in Wiki. 2.5 包(Package) 為何要用其他的包，base R 不是也有嗎?比如畫圖，R base 有 plot()、boxplot() 等。為何要用 ggplot2()? 為了彌補之前的漏洞，如果輕易的更動 base， 會癱瘓過去做過的成品。為了避免類似的狀況，所以開發新的方法。 包會整合容易混淆的作法，更一致的表達如何操作。 可是這樣講還是很模糊，要講清楚變成講古。總之我們已經沒必要追究過去怎麼做，只需要與時俱進，學習最新的方法即可。 為何選 tidyverse? 在呼叫 tidyverse 的時候會看到下面的資訊: library(tidyverse) tidyverse 整合 ggplot2, purrr, tibble, dplyr, tidyr, stringr, readr, forcats，海羅了處理資料的基本方法。 今天進一步介紹 dplyr ，還有開始使用 ggplot2。 為何寫成 ggplot2::mpg?兩個冒號::是什麼? 告訴大家 mpg 是在 ggplot2 包。同理，dplyr::select() 告訴大家 select() 在 dplyr 包。暫時可以把 :: 當作一種方法，代表取包裡的東西。當然你不能寫成 ggplot2$mpg，因為 $ 是取資料的變數，比如 mpg$cty，是另外一種方法。 有推薦其他寫程式的好方法嗎? 有，複製別人寫好的，貼上運行。因為我們要站在巨人的肩膀上。 2.6 dplyr 資料轉換 &amp; ggplot2 資料視覺化 資料轉換和資料視覺化的內容很豐富，所以會在未來的課程不斷的加入新的內容，持續堆疊下去。如果有不熟悉的地方，也許可以考慮複習一下先前教過的內容。 2.7 Wrangle with Data 2.7.1 Prerequisite # install.packages(&quot;tidyverse&quot;) library(tidyverse) Tidyverse contains the packages you may need to use in data science, including ggplot2, dplyr, etc. So you do not need to install them individually. 2.7.2 Data ggplot2::mpg #&gt; # A tibble: 234 x 11 #&gt; manufacturer model displ year cyl trans drv cty hwy fl class #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 audi a4 1.8 1999 4 auto~ f 18 29 p comp~ #&gt; 2 audi a4 1.8 1999 4 manu~ f 21 29 p comp~ #&gt; 3 audi a4 2 2008 4 manu~ f 20 31 p comp~ #&gt; 4 audi a4 2 2008 4 auto~ f 21 30 p comp~ #&gt; 5 audi a4 2.8 1999 6 auto~ f 16 26 p comp~ #&gt; 6 audi a4 2.8 1999 6 manu~ f 18 26 p comp~ #&gt; 7 audi a4 3.1 2008 6 auto~ f 18 27 p comp~ #&gt; 8 audi a4 q~ 1.8 1999 4 manu~ 4 18 26 p comp~ #&gt; 9 audi a4 q~ 1.8 1999 4 auto~ 4 16 25 p comp~ #&gt; 10 audi a4 q~ 2 2008 4 manu~ 4 20 28 p comp~ #&gt; # ... with 224 more rows ?ggplot2::mpg # For more information Or you can simply call ?mpg if you had already call the library. 2.8 dplyr 資料轉換 未來的課程總共會涵蓋下列 dplyr 中的函數: filter() and select() group_by() and ungroup() summarize()and summarise() arrange() and desc() mutate() 2.8.1 Select columns with select() df &lt;- select(mpg, manufacturer, cty, hwy, class) df summary(df) table(df %&gt;% select(manufacturer, class)) df &lt;- select(mpg, manufacturer, cty, hwy, class) df #&gt; # A tibble: 234 x 4 #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 21 29 compact #&gt; 3 audi 20 31 compact #&gt; 4 audi 21 30 compact #&gt; 5 audi 16 26 compact #&gt; 6 audi 18 26 compact #&gt; 7 audi 18 27 compact #&gt; 8 audi 18 26 compact #&gt; 9 audi 16 25 compact #&gt; 10 audi 20 28 compact #&gt; # ... with 224 more rows summary(df) #&gt; manufacturer cty hwy class #&gt; Length:234 Min. : 9.00 Min. :12.00 Length:234 #&gt; Class :character 1st Qu.:14.00 1st Qu.:18.00 Class :character #&gt; Mode :character Median :17.00 Median :24.00 Mode :character #&gt; Mean :16.86 Mean :23.44 #&gt; 3rd Qu.:19.00 3rd Qu.:27.00 #&gt; Max. :35.00 Max. :44.00 table(df %&gt;% select(manufacturer, class)) #&gt; class #&gt; manufacturer 2seater compact midsize minivan pickup subcompact suv #&gt; audi 0 15 3 0 0 0 0 #&gt; chevrolet 5 0 5 0 0 0 9 #&gt; dodge 0 0 0 11 19 0 7 #&gt; ford 0 0 0 0 7 9 9 #&gt; honda 0 0 0 0 0 9 0 #&gt; hyundai 0 0 7 0 0 7 0 #&gt; jeep 0 0 0 0 0 0 8 #&gt; land rover 0 0 0 0 0 0 4 #&gt; lincoln 0 0 0 0 0 0 3 #&gt; mercury 0 0 0 0 0 0 4 #&gt; nissan 0 2 7 0 0 0 4 #&gt; pontiac 0 0 5 0 0 0 0 #&gt; subaru 0 4 0 0 0 4 6 #&gt; toyota 0 12 7 0 7 0 8 #&gt; volkswagen 0 14 7 0 0 6 0 2.8.2 Filter rows with filter() Logic “and” filter(df, class == &quot;compact&quot;, cty &lt; 20) #&gt; # A tibble: 21 x 4 #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 16 26 compact #&gt; 3 audi 18 26 compact #&gt; 4 audi 18 27 compact #&gt; 5 audi 18 26 compact #&gt; 6 audi 16 25 compact #&gt; 7 audi 19 27 compact #&gt; 8 audi 15 25 compact #&gt; 9 audi 17 25 compact #&gt; 10 audi 17 25 compact #&gt; # ... with 11 more rows Logic “or” These three are equivalent. filter(df, class == &quot;compact&quot; | class == &quot;suv&quot;) df %&gt;% filter(class == &quot;compact&quot; | class == &quot;suv&quot;) df %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) filter(df, class == &quot;compact&quot; | class == &quot;suv&quot;) #&gt; # A tibble: 109 x 4 #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 21 29 compact #&gt; 3 audi 20 31 compact #&gt; 4 audi 21 30 compact #&gt; 5 audi 16 26 compact #&gt; 6 audi 18 26 compact #&gt; 7 audi 18 27 compact #&gt; 8 audi 18 26 compact #&gt; 9 audi 16 25 compact #&gt; 10 audi 20 28 compact #&gt; # ... with 99 more rows df %&gt;% filter(class == &quot;compact&quot; | class == &quot;suv&quot;) #&gt; # A tibble: 109 x 4 #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 21 29 compact #&gt; 3 audi 20 31 compact #&gt; 4 audi 21 30 compact #&gt; 5 audi 16 26 compact #&gt; 6 audi 18 26 compact #&gt; 7 audi 18 27 compact #&gt; 8 audi 18 26 compact #&gt; 9 audi 16 25 compact #&gt; 10 audi 20 28 compact #&gt; # ... with 99 more rows df %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) #&gt; # A tibble: 109 x 4 #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 21 29 compact #&gt; 3 audi 20 31 compact #&gt; 4 audi 21 30 compact #&gt; 5 audi 16 26 compact #&gt; 6 audi 18 26 compact #&gt; 7 audi 18 27 compact #&gt; 8 audi 18 26 compact #&gt; 9 audi 16 25 compact #&gt; 10 audi 20 28 compact #&gt; # ... with 99 more rows You can work this way! mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) #&gt; # A tibble: 109 x 4 #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 21 29 compact #&gt; 3 audi 20 31 compact #&gt; 4 audi 21 30 compact #&gt; 5 audi 16 26 compact #&gt; 6 audi 18 26 compact #&gt; 7 audi 18 27 compact #&gt; 8 audi 18 26 compact #&gt; 9 audi 16 25 compact #&gt; 10 audi 20 28 compact #&gt; # ... with 99 more rows 在挑出這些資料後，我們想比較不同製造商在其中兩種車型的市區油耗的平均值: 分成兩步驟，分類與取平均值。 Step 1: 分類 mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer, class) #&gt; # A tibble: 109 x 4 #&gt; # Groups: manufacturer, class [15] #&gt; manufacturer cty hwy class #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 audi 18 29 compact #&gt; 2 audi 21 29 compact #&gt; 3 audi 20 31 compact #&gt; 4 audi 21 30 compact #&gt; 5 audi 16 26 compact #&gt; 6 audi 18 26 compact #&gt; 7 audi 18 27 compact #&gt; 8 audi 18 26 compact #&gt; 9 audi 16 25 compact #&gt; 10 audi 20 28 compact #&gt; # ... with 99 more rows 可以看到 Groups: manufacturer, class [15] 的訊息。 group_by() 是對某個變數的值做分類。比如 group_by(manufacturer, class) 就是對製造商和車型做分類。 仔細觀察資料的話，會發現並不是所有製造商都有這兩種車型被記錄在資料裡。 Step 2: 取平均值 mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer, class) %&gt;% summarise(avg = mean(cty)) #&gt; # A tibble: 15 x 3 #&gt; # Groups: manufacturer [12] #&gt; manufacturer class avg #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 audi compact 17.9 #&gt; 2 chevrolet suv 12.7 #&gt; 3 dodge suv 11.9 #&gt; 4 ford suv 12.9 #&gt; 5 jeep suv 13.5 #&gt; 6 land rover suv 11.5 #&gt; 7 lincoln suv 11.3 #&gt; 8 mercury suv 13.2 #&gt; 9 nissan compact 20 #&gt; 10 nissan suv 13.8 #&gt; 11 subaru compact 19.8 #&gt; 12 subaru suv 18.8 #&gt; 13 toyota compact 22.2 #&gt; 14 toyota suv 14.4 #&gt; 15 volkswagen compact 20.8 summarise() 和 summarize() 功能一樣，純粹是英美式差異。 summarise() 會整合成另一個資料框，avg 是變數名稱， mean() 是整合的方式，計算 cty 的平均值。 可是想加入高速公路油耗進行比較，要怎麼辦呢?複製貼上，改 cty 為 hwy 是一種作法，但不是很高明。如果要把製造商的 cty 和 hwy 的平均值整理在一起又要再多一個步驟。 這件事情可以用 summarise() 一次做完: mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer) %&gt;% summarise(cty_avg = mean(cty), hwy_avg = mean(hwy)) #&gt; # A tibble: 12 x 3 #&gt; manufacturer cty_avg hwy_avg #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 audi 17.9 26.9 #&gt; 2 chevrolet 12.7 17.1 #&gt; 3 dodge 11.9 16 #&gt; 4 ford 12.9 17.8 #&gt; 5 jeep 13.5 17.6 #&gt; 6 land rover 11.5 16.5 #&gt; 7 lincoln 11.3 17 #&gt; 8 mercury 13.2 18 #&gt; 9 nissan 15.8 21.3 #&gt; 10 subaru 19.2 25.4 #&gt; 11 toyota 19.1 25.6 #&gt; 12 volkswagen 20.8 28.5 可是現在沒辦法直接看出哪個製造商的平均油耗最高最低，我們想要排列資料: mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer) %&gt;% summarise(cty_avg = mean(cty), hwy_avg = mean(hwy)) %&gt;% arrange(cty_avg) #&gt; # A tibble: 12 x 3 #&gt; manufacturer cty_avg hwy_avg #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 lincoln 11.3 17 #&gt; 2 land rover 11.5 16.5 #&gt; 3 dodge 11.9 16 #&gt; 4 chevrolet 12.7 17.1 #&gt; 5 ford 12.9 17.8 #&gt; 6 mercury 13.2 18 #&gt; 7 jeep 13.5 17.6 #&gt; 8 nissan 15.8 21.3 #&gt; 9 audi 17.9 26.9 #&gt; 10 toyota 19.1 25.6 #&gt; 11 subaru 19.2 25.4 #&gt; 12 volkswagen 20.8 28.5 arrange() 由小到大排列 cty_avg 這個變數。 希望油耗表現最好的排在第一位，就用 desc() 包住 cty_avg。 mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer) %&gt;% summarise(cty_avg = mean(cty), hwy_avg = mean(hwy)) %&gt;% arrange(desc(cty_avg)) #&gt; # A tibble: 12 x 3 #&gt; manufacturer cty_avg hwy_avg #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 volkswagen 20.8 28.5 #&gt; 2 subaru 19.2 25.4 #&gt; 3 toyota 19.1 25.6 #&gt; 4 audi 17.9 26.9 #&gt; 5 nissan 15.8 21.3 #&gt; 6 jeep 13.5 17.6 #&gt; 7 mercury 13.2 18 #&gt; 8 ford 12.9 17.8 #&gt; 9 chevrolet 12.7 17.1 #&gt; 10 dodge 11.9 16 #&gt; 11 land rover 11.5 16.5 #&gt; 12 lincoln 11.3 17 市區油耗的表現都不如高速公路的油耗，可能是因為市區會一直塞車，走走停停，所以油耗表現比較差。但是差距有多少呢? mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer) %&gt;% summarise(cty_avg = mean(cty), hwy_avg = mean(hwy)) %&gt;% mutate(difference = hwy_avg - cty_avg) #&gt; # A tibble: 12 x 4 #&gt; manufacturer cty_avg hwy_avg difference #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 audi 17.9 26.9 9 #&gt; 2 chevrolet 12.7 17.1 4.44 #&gt; 3 dodge 11.9 16 4.14 #&gt; 4 ford 12.9 17.8 4.89 #&gt; 5 jeep 13.5 17.6 4.12 #&gt; 6 land rover 11.5 16.5 5 #&gt; 7 lincoln 11.3 17 5.67 #&gt; 8 mercury 13.2 18 4.75 #&gt; 9 nissan 15.8 21.3 5.50 #&gt; 10 subaru 19.2 25.4 6.20 #&gt; 11 toyota 19.1 25.6 6.55 #&gt; 12 volkswagen 20.8 28.5 7.71 mutate() 新增變數，變數命名為 difference，是計算 hwy_avg 和 cty_avg 的差異， - 跟你想的應該一樣，代表減法。 2.9 ggplot2 資料視覺化 ggplot(data = mpg) + geom_point(mapping = aes(x = cty, y = hwy)) 看到 ggplot() 代表要畫圖了，裡面第一個位置放資料 mpg。 這裡的 + 可能跟你想的加法不一樣， 接在 ggplot2 包的函數後面， 就達到跟 %&gt;% 相同的效果。 所以你發現了嗎?這就是個坑，很可能不小心就寫錯。 來看看 RStudio 首席工程師 Hadley 的看法: ggplot(data = mpg) + geom_point(mapping = aes(x = cty, y = hwy)) geom_point() 是畫點圖。 mapping() 是指映射。 aes() 是 asthetic 的簡稱，是美學的意思。 aes() 放的是座標軸，順序是 x 軸 y 軸。 通常會省略 x、y。 通常會把函數的名稱省略，所以 data、mapping、x、y 都可以省略。但是不能更改他們擺放的順序。所以下面兩個是完全不同的映射方式。 ggplot(mpg) + geom_point(aes(cty, hwy)) ggplot(mpg) + geom_point(aes(hwy, cty)) 如果要畫兩種以上的圖，只要用 + 連接即可: ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() + geom_smooth(method = lm) geom_smooth(method = lm) 是指用線性迴歸畫圖，在此不深究這個問題。 寫法有其他種類的變形，來比較一下: mpg %&gt;% ggplot(aes(cty, hwy)) + geom_point() ggplot(mpg, aes(cty, hwy)) + geom_point() ggplot(mpg) + geom_point(aes(cty, hwy)) mpg %&gt;% ggplot() + geom_point(aes(cty, hwy)) 第一種是把資料擺在 ggplot() 外頭，再用 %&gt;% 傳到下一步驟。 第二種是把資料擺在 ggplot() 裡面。 第三種把美學擺在畫圖的方式。 或許你能寫出第四種，再想第五種… 但是，別寫成這樣，是錯的: ggplot(mpg, cty, hwy) + geom_point() #&gt; Error in ggplot.default(mpg, cty, hwy): 找不到物件 &#39;cty&#39; ggplot(mpg) + geom_point(cty, hwy) #&gt; Error in layer(data = data, mapping = mapping, stat = stat, geom = GeomPoint, : 找不到物件 &#39;cty&#39; 在回到剛才整理過的資料，現在要以視覺化的方式呈現，我們想看出市區與高速公路油耗的差異: mpg %&gt;% select(manufacturer, cty, hwy, class) %&gt;% filter(class %in% c(&quot;compact&quot;, &quot;suv&quot;)) %&gt;% group_by(manufacturer) %&gt;% summarise(cty_avg = mean(cty), hwy_avg = mean(hwy)) %&gt;% mutate(difference = hwy_avg - cty_avg) %&gt;% ggplot() + geom_col(aes(manufacturer, hwy_avg), alpha = 0.2, fill = &quot;orange&quot;, color = &quot;darkorange&quot;) + geom_col(aes(manufacturer, difference), alpha = 0.3, fill = &quot;violet&quot;, color = &quot;purple&quot;) + coord_flip() + theme_classic() geom_col() 和 geom_boxplot() 都適用於雙變數，一個離散，一個連續。也許你可以試著疊加盒鬚圖與長條圖。 只要用顏色就能區分即可，所以使用 difference 比 cty_avg 更適當。 當然可以自行嘗試使用 cty_avg 的後果。 alpha 設定透明度。 fill 填滿顏色。 color 邊框顏色。 受限於目前的講解內容，我們整理的資料尚未達到“齊整”，應該再做一些調整更容易做事。 齊整資料 : tidy data "]
]
